{
  "version": 3,
  "sources": ["../../../../Downloads/edumaster40-main/netlify/functions/check-access.js"],
  "sourceRoot": "C:/Users/suraj/AppData/Local/Temp/tmp-14584-domEEp4bxU2Y",
  "sourcesContent": ["// Netlify function to proxy access check requests\nexports.handler = async (event, context) => {\n  // Handle preflight requests\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Max-Age': '86400'\n      },\n      body: ''\n    };\n  }\n  \n  try {\n    // Get the userId from query parameters\n    const { userId } = event.queryStringParameters || {};\n    \n    if (!userId) {\n      return {\n        statusCode: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({ \n          hasAccess: false, \n          message: 'UserId parameter is required' \n        })\n      };\n    }\n    \n    // Log the request for debugging\n    console.log('Checking access for userId:', userId);\n    \n    // Forward the request to the Telegram bot API\n    const apiUrl = `https://competitive-karly-edumastersuraj-75acc2f2.koyeb.app/check-access?userId=${encodeURIComponent(userId)}`;\n    \n    const response = await fetch(apiUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'Netlify-Function-Proxy/1.0'\n      }\n    });\n    \n    // Get response data\n    const data = await response.json();\n    \n    // Log the response for debugging\n    console.log('Access check response:', response.status, data);\n    \n    return {\n      statusCode: response.status,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify(data)\n    };\n  } catch (error) {\n    console.error('Access check error:', error);\n    \n    return {\n      statusCode: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({ \n        hasAccess: false, \n        message: 'Internal server error: ' + error.message \n      })\n    };\n  }\n};"],
  "mappings": ";AACA,QAAQ,UAAU,OAAO,OAAO,YAAY;AAE1C,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,+BAA+B;AAAA,QAC/B,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,QAChC,0BAA0B;AAAA,MAC5B;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,EAAE,OAAO,IAAI,MAAM,yBAAyB,CAAC;AAEnD,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,+BAA+B;AAAA,QACjC;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,WAAW;AAAA,UACX,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAAA,IACF;AAGA,YAAQ,IAAI,+BAA+B,MAAM;AAGjD,UAAM,SAAS,mFAAmF,mBAAmB,MAAM,CAAC;AAE5H,UAAM,WAAW,MAAM,MAAM,QAAQ;AAAA,MACnC,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,cAAc;AAAA,MAChB;AAAA,IACF,CAAC;AAGD,UAAM,OAAO,MAAM,SAAS,KAAK;AAGjC,YAAQ,IAAI,0BAA0B,SAAS,QAAQ,IAAI;AAE3D,WAAO;AAAA,MACL,YAAY,SAAS;AAAA,MACrB,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,MACjC;AAAA,MACA,MAAM,KAAK,UAAU,IAAI;AAAA,IAC3B;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,uBAAuB,KAAK;AAE1C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,MACjC;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,WAAW;AAAA,QACX,SAAS,4BAA4B,MAAM;AAAA,MAC7C,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
